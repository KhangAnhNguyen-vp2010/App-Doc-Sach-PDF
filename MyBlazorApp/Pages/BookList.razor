@page "/books"
@using MyBlazorApp.components
@inject HttpClient Http
@using System.Net.Http.Json
@using MyBlazorApp.Models

<div class="d-flex justify-content-center mb-4">
    <button class="btn btn-primary" @onclick="ShowAddModal">+ Thêm sách mới</button>
</div>

@if (books == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!books.Any())
{
    <div class="alert alert-warning text-center" role="alert">
        Không có sách nào.
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
        @foreach (var book in books)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0 rounded-3">
                    <img src="@book.CoverUrl" class="card-img-top" alt="@book.Title" style="height: 180px; object-fit: cover; border-top-left-radius: 0.75rem; border-top-right-radius: 0.75rem;" />
                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title fw-semibold mb-1 text-truncate" title="@book.Title">@book.Title</h6>
                        <p class="text-muted fst-italic mb-2 small text-truncate" title="@book.Author">Tác giả: @book.Author</p>

                        <p class="card-text flex-grow-1 small" style="max-height: 60px; overflow: hidden; line-height: 1.2em;">
                            @book.Description
                        </p>

                        <div class="mb-2">
                            <small class="text-muted d-block">Thể loại: <span class="fw-semibold">@book.Category?.Name</span></small>
                            <small class="text-muted d-block">Năm xuất bản: <span class="fw-semibold">@book.PublicationYear</span></small>
                            <small class="text-muted d-block">Số trang: <span class="fw-semibold">@book.PageCount</span></small>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-3 small text-muted">
                            <div>Lượt xem: @book.ViewCount</div>
                            <div>Lượt thích: @book.LikeCount</div>
                        </div>

                        <div class="d-flex gap-2">
                            <a href="@book.PdfUrl" target="_blank" class="btn btn-sm btn-outline-primary flex-grow-1" title="Xem PDF">
                                <i class="bi bi-file-earmark-pdf"></i> PDF
                            </a>
                            <button class="btn btn-sm btn-warning flex-grow-1" @onclick="@(() => ShowEditModal(book.Id))" title="Sửa sách">
                                <i class="bi bi-pencil-square"></i> Sửa
                            </button>
                            <button class="btn btn-sm btn-danger flex-grow-1" @onclick="() => DeleteBook(book.Id)" title="Xóa sách">
                                <i class="bi bi-trash"></i> Xóa
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showFormModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content p-4 rounded-4 shadow-lg">
                <h5 class="modal-title mb-3">@((isEditMode ? "Sửa sách" : "Thêm sách mới"))</h5>
                <BookForm IsEdit="isEditMode" BookId="@selectedBookId" OnSuccess="OnBookFormSuccess" @key="selectedBookId" />
                <button class="btn btn-secondary mt-3" @onclick="() => showFormModal = false">Đóng</button>
            </div>
        </div>
    </div>
}

@code {
    private List<SachDTO>? books;
    private bool showFormModal = false;
    private bool isEditMode = false;
    private string? selectedBookId;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            books = await Http.GetFromJsonAsync<List<SachDTO>>("http://localhost:5140/api/Sach");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi tải dữ liệu: {ex.Message}");
        }
    }

    private void ShowAddModal()
    {
        isEditMode = false;
        selectedBookId = null;
        showFormModal = true;
    }

    private void ShowEditModal(string id)
    {
        isEditMode = true;
        selectedBookId = id;
        showFormModal = true;
    }

    private async Task OnBookFormSuccess()
    {
        showFormModal = false;
        await LoadData();
        StateHasChanged();
    }

    private async Task DeleteBook(string id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa sách này không?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5140/api/Sach/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData(); // Reload danh sách sau khi xóa
            }
            else
            {
                errorMessage = $"Lỗi khi xóa: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Lỗi khi xóa sách: " + ex.Message;
        }
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
}
